# trunk-ignore-all(prettier)


# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
version: "3.10"

networks:
  appnet:
    name: appnet
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.10.10.0/24

volumes:
  db_postgres_data:
    name: db_postgres_data
  db_redis:
    name: db_redis
  db_static:
    name: db_static
  db_rabbit_mq:
    name: db_rabbit_mq

services:
  server:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: appnet_server
    restart: always
    depends_on:
      - db
      - redis
      - rabbitmq
    volumes:
      - db_static:/app/static
    networks:
      - appnet
    command:
      - bash
      - -c
      - |
        wait-for-it -s db:5432 -s redis:6379 -t 300
        mkdir -p /var/log/appnet
        touch /var/log/appnet/appnet.log
        tail -f /var/log/appnet/appnet.log
    ports:
      - 8000:8000
    environment:
      - P